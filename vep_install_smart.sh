#!/bin/bash
# vep_install_smart.sh - Instalador inteligente do VEP com detec√ß√£o autom√°tica de vers√£o

#set -euo pipefail

echo "üß¨ Instalador Inteligente do VEP - Ensembl GitHub"
echo "==============================================="

# Configura√ß√µes padr√£o
SPECIES="homo_sapiens"
ASSEMBLY="GRCh38"
VEPCACHE="/dados/vep_cache"
VEP_DIR="$HOME/ensembl-vep"

# Fun√ß√£o para detectar √∫ltima vers√£o
detect_latest_vep_version() {
    echo "üîç Detectando √∫ltima vers√£o do VEP no GitHub..."
    
    # Tenta via API do GitHub (mais confi√°vel)
    if command -v curl >/dev/null 2>&1; then
        LATEST=$(curl -s https://api.github.com/repos/Ensembl/ensembl-vep/releases/latest | grep '"tag_name"' | sed 's/.*"tag_name": "\([^"]*\)".*/\1/' 2>/dev/null || echo "")
        if [ -n "$LATEST" ]; then
            echo "‚úÖ √öltima release via GitHub API: $LATEST"
            echo "$LATEST"
            return 0
        fi
    fi
    
    # Fallback: clona temporariamente para ver tags
    echo "üîÑ Fallback: verificando tags diretamente..."
    TEMP_DIR=$(mktemp -d)
    git clone --depth 1 https://github.com/Ensembl/ensembl-vep.git "$TEMP_DIR" 2>/dev/null || {
        rm -rf "$TEMP_DIR"
        echo "release/114"  # Fallback final
        return 0
    }
    
    cd "$TEMP_DIR"
    git fetch --tags 2>/dev/null || true
    LATEST=$(git tag --sort=-version:refname | grep -E '^[0-9]+\.[0-9]+(\.[0-9]+)?$' | head -1 2>/dev/null || echo "release/114")
    cd - >/dev/null
    rm -rf "$TEMP_DIR"
    
    echo "‚úÖ √öltima vers√£o detectada: $LATEST"
    echo "$LATEST"
}

# Fun√ß√£o principal de instala√ß√£o
install_vep_latest() {
    local version="$1"
    
    echo ""
    echo "üì¶ Instalando VEP vers√£o: $version"
    echo "üìÅ Diret√≥rio: $VEP_DIR"
    echo "üíæ Cache: $VEPCACHE"
    
    # Remove instala√ß√£o anterior
    if [ -d "$VEP_DIR" ]; then
        echo "üßπ Removendo instala√ß√£o anterior..."
        rm -rf "$VEP_DIR"
    fi
    
    # Clona reposit√≥rio
    echo "üì• Clonando reposit√≥rio Ensembl VEP..."
    git clone https://github.com/Ensembl/ensembl-vep.git "$VEP_DIR"
    
    cd "$VEP_DIR"
    
    # Checkout da vers√£o espec√≠fica
    echo "üîÑ Mudando para vers√£o: $version"
    git checkout "$version" || {
        echo "‚ö†Ô∏è  Vers√£o $version n√£o encontrada, usando main"
        git checkout main
    }
    
    # Mostra informa√ß√µes da vers√£o
    echo "üìã Informa√ß√µes da vers√£o instalada:"
    git log --oneline -1
    
    # Verifica depend√™ncias
    echo ""
    echo "üê™ Verificando depend√™ncias Perl..."
    
    # Depend√™ncias essenciais
    PERL_DEPS=("DBI" "Archive::Zip" "LWP::Simple" "JSON")
    for dep in "${PERL_DEPS[@]}"; do
        if perl -M"$dep" -e 1 2>/dev/null; then
            echo "   ‚úÖ $dep"
        else
            echo "   üîß Instalando $dep..."
            case "$dep" in
                "DBI") conda install -c bioconda perl-dbi -y ;;
                "Archive::Zip") conda install -c conda-forge perl-archive-zip -y ;;
                "LWP::Simple") conda install -c conda-forge perl-lwp-simple -y ;;
                "JSON") conda install -c conda-forge perl-json -y ;;
            esac
        fi
    done
    
    # Torna execut√°vel
    chmod +x INSTALL.pl
    
    echo ""
    echo "‚ö° Executando instala√ß√£o do VEP..."
    echo "üí° Isso pode demorar 15-30 minutos (baixa cache + compila)..."
    
    # Instala√ß√£o com progresso
    ./INSTALL.pl \
        --AUTO a \
        --SPECIES "$SPECIES" \
        --ASSEMBLY "$ASSEMBLY" \
        --CACHEDIR "$VEPCACHE" \
        --NO_BIOPERL \
        --NO_HTSLIB \
        --NO_TEST \
        --VERBOSE \
        --DESTDIR "$VEP_DIR" \
        --CACHE_VERSION "114" || {
        
        echo "‚ö†Ô∏è  Instala√ß√£o com cache falhou, tentando sem cache..."
        ./INSTALL.pl \
            --AUTO a \
            --SPECIES "$SPECIES" \
            --ASSEMBLY "$ASSEMBLY" \
            --NO_BIOPERL \
            --NO_HTSLIB \
            --NO_TEST \
            --NO_UPDATE \
            --DESTDIR "$VEP_DIR"
    }
}

# Fun√ß√£o para configurar PATH
setup_vep_path() {
    echo ""
    echo "üîó Configurando PATH do VEP..."
    
    # Adiciona ao ambiente conda
    CONDA_PREFIX="${CONDA_PREFIX:-$HOME/miniforge3/envs/$CONDA_ENV}"
    
    if [ -d "$CONDA_PREFIX" ]; then
        mkdir -p "$CONDA_PREFIX/etc/conda/activate.d"
        
        cat > "$CONDA_PREFIX/etc/conda/activate.d/vep_latest.sh" << EOF
#!/bin/bash
# VEP Latest - PATH e PERL5LIB
export PATH="$VEP_DIR:\$PATH"
export PERL5LIB="$VEP_DIR:\$PERL5LIB"
EOF
        
        echo "‚úÖ PATH configurado para ambiente conda"
        
        # Ativa imediatamente
        export PATH="$VEP_DIR:$PATH"
        export PERL5LIB="$VEP_DIR:$PERL5LIB"
    fi
}

# Fun√ß√£o para instalar cache separadamente
install_vep_cache() {
    echo ""
    echo "üíæ Instalando cache do VEP..."
    
    if command -v vep_install >/dev/null 2>&1; then
        echo "üîß Usando vep_install para cache..."
        vep_install -a cf -s "$SPECIES" -y "$ASSEMBLY" -c "$VEPCACHE" --NO_BIOPERL
    else
        echo "‚ö†Ô∏è  vep_install n√£o encontrado, usando INSTALL.pl..."
        cd "$VEP_DIR"
        ./INSTALL.pl \
            --AUTO cf \
            --SPECIES "$SPECIES" \
            --ASSEMBLY "$ASSEMBLY" \
            --CACHEDIR "$VEPCACHE" \
            --NO_BIOPERL
    fi
}

# Fun√ß√£o de teste
test_vep_installation() {
    echo ""
    echo "üß™ Testando instala√ß√£o..."
    
    if command -v vep >/dev/null 2>&1; then
        echo "‚úÖ VEP encontrado: $(which vep)"
        
        # Testa vers√£o
        echo "üìã Informa√ß√µes da vers√£o:"
        vep --help 2>&1 | head -15 | grep -E "(ENSEMBL|ensembl-vep|Versions)" || echo "   Vers√£o instalada com sucesso"
        
        # Testa cache
        if [ -d "$VEPCACHE/$SPECIES" ]; then
            CACHE_DIRS=$(find "$VEPCACHE/$SPECIES" -maxdepth 1 -type d -name "*$ASSEMBLY*" 2>/dev/null || true)
            if [ -n "$CACHE_DIRS" ]; then
                echo "‚úÖ Cache verificado: $CACHE_DIRS"
            else
                echo "‚ö†Ô∏è  Cache para $ASSEMBLY n√£o encontrado"
                return 1
            fi
        else
            echo "‚ùå Diret√≥rio de cache n√£o encontrado"
            return 1
        fi
        
        echo "‚úÖ Instala√ß√£o completa e funcional!"
        return 0
    else
        echo "‚ùå VEP n√£o encontrado no PATH"
        return 1
    fi
}

# Execu√ß√£o principal
main() {
    # Detecta vers√£o mais recente
    LATEST_VERSION=$(detect_latest_vep_version)
    
    echo ""
    echo "üéØ Vers√£o selecionada: $LATEST_VERSION"
    echo ""
    
    # Pergunta confirma√ß√£o
    read -p "ü§î Continuar com a instala√ß√£o? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "‚ùå Instala√ß√£o cancelada"
        exit 0
    fi
    
    # Instala VEP
    install_vep_latest "$LATEST_VERSION"
    
    # Configura PATH
    setup_vep_path
    
    # Instala cache
    install_vep_cache
    
    # Testa
    if test_vep_installation; then
        echo ""
        echo "üéâ Instala√ß√£o do VEP conclu√≠da com sucesso!"
        echo "üìã Resumo:"
        echo "   ‚Ä¢ Vers√£o: $LATEST_VERSION (√∫ltima do GitHub)"
        echo "   ‚Ä¢ Localiza√ß√£o: $VEP_DIR"
        echo "   ‚Ä¢ Cache: $VEPCACHE"
        echo "   ‚Ä¢ Esp√©cie: $SPECIES"
        echo "   ‚Ä¢ Assembly: $ASSEMBLY"
        echo ""
        echo "üí° Para usar:"
        echo "   vep --cache --offline --species $SPECIES --assembly $ASSEMBLY --dir_cache $VEPCACHE"
    else
        echo ""
        echo "‚ùå Problemas na instala√ß√£o detectados"
        echo "üí° Verifique logs acima e tente:"
        echo "   source start_genomics_universal.sh"
        echo "   ./vep_install_latest.sh"
    fi
}

# Executa se chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
